/**
 * Quick Verification Script for Anti-Duplicate Call Protection
 * Run this in browser console to verify the system is working
 */

console.log('üîç Verifying Anti-Duplicate Call Protection...');

// Quick verification function
function verifyProtection() {
    if (!window.smartMatchingEngine) {
        console.error('‚ùå Smart Matching Engine not found. Make sure the test page is loaded.');
        return false;
    }
    
    console.log('‚úÖ Engine found, checking protection mechanisms...');
    
    // Check 1: Call tracking properties exist
    const hasCallTracking = smartMatchingEngine.isLoadingLocationData !== undefined &&
                           smartMatchingEngine.isRefreshingLocationData !== undefined &&
                           smartMatchingEngine.lastLocationDataLoad !== undefined;
    
    console.log('üìä Call tracking properties:', hasCallTracking ? '‚úÖ Present' : '‚ùå Missing');
    
    // Check 2: Protection methods exist
    const hasProtectionMethods = typeof smartMatchingEngine.performLocationDataRefresh === 'function' &&
                                typeof smartMatchingEngine.forceRefreshLocationData === 'function' &&
                                typeof smartMatchingEngine.clearRefreshCooldown === 'function';
    
    console.log('üõ°Ô∏è Protection methods:', hasProtectionMethods ? '‚úÖ Present' : '‚ùå Missing');
    
    // Check 3: Status methods exist
    const hasStatusMethods = typeof smartMatchingEngine.getCallStats === 'function' &&
                            typeof smartMatchingEngine.getDebugInfo === 'function';
    
    console.log('üìà Status methods:', hasStatusMethods ? '‚úÖ Present' : '‚ùå Missing');
    
    // Check 4: Current state
    const status = smartMatchingEngine.getStatus();
    const callStats = smartMatchingEngine.getCallStats();
    
    console.log('üéØ Current status:', status);
    console.log('üìä Call statistics:', callStats);
    
    return hasCallTracking && hasProtectionMethods && hasStatusMethods;
}

// Test protection in action
function testProtectionInAction() {
    console.log('\nüß™ Testing Protection in Action...');
    
    // Test 1: Multiple rapid refresh calls
    console.log('üîÑ Making 3 rapid refresh calls...');
    smartMatchingEngine.refreshLocationData();
    smartMatchingEngine.refreshLocationData();
    smartMatchingEngine.refreshLocationData();
    
    // Check if only one is actually processing
    setTimeout(() => {
        const stats = smartMatchingEngine.getCallStats();
        console.log('üìä After rapid calls - Current state:', stats.currentCalls);
        console.log('‚è≥ Cooldown status:', stats.timing.canRefresh ? 'Can refresh' : 'Cooldown active');
    }, 500);
    
    // Test 2: Check cooldown
    setTimeout(() => {
        const stats = smartMatchingEngine.getCallStats();
        console.log('üìä After 1 second - Cooldown remaining:', stats.timing.cooldownRemaining ? `${Math.ceil(stats.timing.cooldownRemaining / 1000)}s` : 'None');
    }, 1000);
}

// Run verification
function runVerification() {
    console.log('üöÄ Running Protection Verification...\n');
    
    if (verifyProtection()) {
        console.log('\n‚úÖ All protection mechanisms verified!');
        testProtectionInAction();
    } else {
        console.log('\n‚ùå Protection verification failed. Check the implementation.');
    }
}

// Export for manual testing
window.verifyProtection = {
    verifyProtection,
    testProtectionInAction,
    runVerification
};

console.log('‚úÖ Verification functions loaded. Use verifyProtection.runVerification() to test');
